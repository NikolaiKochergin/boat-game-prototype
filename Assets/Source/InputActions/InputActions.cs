//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/InputActions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerLeft"",
            ""id"": ""1a766703-3c47-4127-8639-d09693ca07de"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""97a3e919-f530-46df-96dc-b46f71949025"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""5c4ea2ce-d879-4557-bd65-f8fedb442167"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e401407-ace0-4f12-86c3-348634611074"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a19d464-07cf-41a5-850c-9cf5cbdc07f9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerRight"",
            ""id"": ""405f1c1a-34e9-4b09-a9cd-d8caba8c41d4"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1a62eb82-76bc-4c0d-bdf5-3c996da97505"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""e60360ff-ead1-4e69-ae40-344346c59a8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52d791fd-da20-43a9-ab2e-dbb85fb5a7fa"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a8b72b2-9d22-4f7b-8e7f-9ddee3a093c9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""30ac4f80-a8b2-4599-86f9-b43a5529a18b"",
            ""actions"": [
                {
                    ""name"": ""StartRace"",
                    ""type"": ""Button"",
                    ""id"": ""cee2f315-d467-4975-ae97-dafd96239db1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a541445-f992-4d8c-9245-4eae652aeaf9"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerLeft
        m_PlayerLeft = asset.FindActionMap("PlayerLeft", throwIfNotFound: true);
        m_PlayerLeft_MoveLeft = m_PlayerLeft.FindAction("MoveLeft", throwIfNotFound: true);
        m_PlayerLeft_MoveRight = m_PlayerLeft.FindAction("MoveRight", throwIfNotFound: true);
        // PlayerRight
        m_PlayerRight = asset.FindActionMap("PlayerRight", throwIfNotFound: true);
        m_PlayerRight_MoveLeft = m_PlayerRight.FindAction("MoveLeft", throwIfNotFound: true);
        m_PlayerRight_MoveRight = m_PlayerRight.FindAction("MoveRight", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_StartRace = m_Menu.FindAction("StartRace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerLeft
    private readonly InputActionMap m_PlayerLeft;
    private List<IPlayerLeftActions> m_PlayerLeftActionsCallbackInterfaces = new List<IPlayerLeftActions>();
    private readonly InputAction m_PlayerLeft_MoveLeft;
    private readonly InputAction m_PlayerLeft_MoveRight;
    public struct PlayerLeftActions
    {
        private @InputActions m_Wrapper;
        public PlayerLeftActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_PlayerLeft_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_PlayerLeft_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLeft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLeftActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLeftActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLeftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLeftActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IPlayerLeftActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IPlayerLeftActions instance)
        {
            if (m_Wrapper.m_PlayerLeftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLeftActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLeftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLeftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLeftActions @PlayerLeft => new PlayerLeftActions(this);

    // PlayerRight
    private readonly InputActionMap m_PlayerRight;
    private List<IPlayerRightActions> m_PlayerRightActionsCallbackInterfaces = new List<IPlayerRightActions>();
    private readonly InputAction m_PlayerRight_MoveLeft;
    private readonly InputAction m_PlayerRight_MoveRight;
    public struct PlayerRightActions
    {
        private @InputActions m_Wrapper;
        public PlayerRightActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_PlayerRight_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_PlayerRight_MoveRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerRight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerRightActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerRightActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerRightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerRightActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        private void UnregisterCallbacks(IPlayerRightActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        public void RemoveCallbacks(IPlayerRightActions instance)
        {
            if (m_Wrapper.m_PlayerRightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerRightActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerRightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerRightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerRightActions @PlayerRight => new PlayerRightActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_StartRace;
    public struct MenuActions
    {
        private @InputActions m_Wrapper;
        public MenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartRace => m_Wrapper.m_Menu_StartRace;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @StartRace.started += instance.OnStartRace;
            @StartRace.performed += instance.OnStartRace;
            @StartRace.canceled += instance.OnStartRace;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @StartRace.started -= instance.OnStartRace;
            @StartRace.performed -= instance.OnStartRace;
            @StartRace.canceled -= instance.OnStartRace;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IPlayerLeftActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
    public interface IPlayerRightActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnStartRace(InputAction.CallbackContext context);
    }
}
